### Notes regarding chosen solutions ###


Problem 01:
Inclusion-exclusion principle prevents solution having to test for all 
divisable numbers. Arithmetic formula ( Sn = n/2(2a+(n-1)d) ) used in 
conjunction further speeds up solution, except in some outlier cases (C#).

Problem 02:
An obvious choice for Fibonacci sequence generation is recursion. 
However, this becomes inefficient as numbers grow exponentially and recursion levels grow deeper.
Instead a simple iterative loop proves more effective.
As modulo is computationally expensive, an alternative is sought.
Most languages allow for bitwise AND tests, which examine a values least significant bit to determine its parity.

Problem 03:
By dividing out all other factors we are left with the largest prime factor.
By treating even numbers seperately we can avoid testing them again.
By setting a square root boundary we can efficiently deal with prime 
 numbers which will have no other divisors.

















